
Week_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000020c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  00000280  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e85  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009fe  00000000  00000000  000011f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000613  00000000  00000000  00001bf7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000011c  00000000  00000000  0000220c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c4  00000000  00000000  00002328  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005c2  00000000  00000000  000027ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00002dae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	a8 c0       	rjmp	.+336    	; 0x176 <__vector_9>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a3 30       	cpi	r26, 0x03	; 3
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	a6 d0       	rcall	.+332    	; 0x1f6 <main>
  aa:	ae c0       	rjmp	.+348    	; 0x208 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <lcd_command>:
#include "LCD.h"

void lcd_command(unsigned char command)  //Function to send command instruction to LCD
{
	PORTC = command & 0xF0; // hoge nibble
  ae:	98 2f       	mov	r25, r24
  b0:	90 7f       	andi	r25, 0xF0	; 240
  b2:	95 bb       	out	0x15, r25	; 21
	PORTC = PORTC | 0x08; // data (RS=0),
  b4:	ab 9a       	sbi	0x15, 3	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b6:	ef e4       	ldi	r30, 0x4F	; 79
  b8:	f3 ec       	ldi	r31, 0xC3	; 195
  ba:	31 97       	sbiw	r30, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <lcd_command+0xc>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <lcd_command+0x12>
  c0:	00 00       	nop
	// start (EN=1)
	_delay_ms(25); // wait 1 ms
	PORTC = 0x04; // stop (EN = 0)
  c2:	94 e0       	ldi	r25, 0x04	; 4
  c4:	95 bb       	out	0x15, r25	; 21
	PORTC = (command & 0x0F) << 4; // lage nibble
  c6:	f0 e1       	ldi	r31, 0x10	; 16
  c8:	8f 9f       	mul	r24, r31
  ca:	c0 01       	movw	r24, r0
  cc:	11 24       	eor	r1, r1
  ce:	85 bb       	out	0x15, r24	; 21
	PORTC = PORTC | 0x08; // data (RS=0),
  d0:	ab 9a       	sbi	0x15, 3	; 21
  d2:	8f e4       	ldi	r24, 0x4F	; 79
  d4:	93 ec       	ldi	r25, 0xC3	; 195
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <lcd_command+0x28>
  da:	00 c0       	rjmp	.+0      	; 0xdc <lcd_command+0x2e>
  dc:	00 00       	nop
	// start (EN=1)
	_delay_ms(25); // wait 1 ms
	PORTC = 0x00; // stop
  de:	15 ba       	out	0x15, r1	; 21
  e0:	08 95       	ret

000000e2 <init_lcd>:
}

void init_lcd(void)
{
	// return home
	DDRC = 0xff;
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	84 bb       	out	0x14, r24	; 20
  e6:	8f e4       	ldi	r24, 0x4F	; 79
  e8:	93 ec       	ldi	r25, 0xC3	; 195
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <init_lcd+0x8>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <init_lcd+0xe>
  f0:	00 00       	nop
	
	_delay_ms(25);
	
	lcd_command( 0x02 );
  f2:	82 e0       	ldi	r24, 0x02	; 2
  f4:	dc df       	rcall	.-72     	; 0xae <lcd_command>
  f6:	8f e4       	ldi	r24, 0x4F	; 79
  f8:	93 ec       	ldi	r25, 0xC3	; 195
  fa:	01 97       	sbiw	r24, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <init_lcd+0x18>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <init_lcd+0x1e>
 100:	00 00       	nop
	_delay_ms(25);
	
	// mode: 4 bits interface data, 2 lines, 5x8 dots
	lcd_command( 0x28 );
 102:	88 e2       	ldi	r24, 0x28	; 40
 104:	d4 df       	rcall	.-88     	; 0xae <lcd_command>
 106:	8f e4       	ldi	r24, 0x4F	; 79
 108:	93 ec       	ldi	r25, 0xC3	; 195
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <init_lcd+0x28>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <init_lcd+0x2e>
	_delay_ms(25);
	
	// display: on, cursor off, blinking off
	lcd_command( 0x0C );
 110:	00 00       	nop
 112:	8c e0       	ldi	r24, 0x0C	; 12
 114:	cc df       	rcall	.-104    	; 0xae <lcd_command>
 116:	8f e4       	ldi	r24, 0x4F	; 79
 118:	93 ec       	ldi	r25, 0xC3	; 195
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <init_lcd+0x38>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <init_lcd+0x3e>
	_delay_ms(25);
	
	// entry mode: cursor to right, no shift
	lcd_command( 0x06 );
 120:	00 00       	nop
 122:	86 e0       	ldi	r24, 0x06	; 6
 124:	c4 df       	rcall	.-120    	; 0xae <lcd_command>
 126:	8f e4       	ldi	r24, 0x4F	; 79
 128:	93 ec       	ldi	r25, 0xC3	; 195
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <init_lcd+0x48>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <init_lcd+0x4e>
	_delay_ms(25);

	// RAM adress: 0, first position, line 1
	lcd_command( 0x80 );
 130:	00 00       	nop
 132:	80 e8       	ldi	r24, 0x80	; 128
 134:	bc df       	rcall	.-136    	; 0xae <lcd_command>
 136:	8f e4       	ldi	r24, 0x4F	; 79
 138:	93 ec       	ldi	r25, 0xC3	; 195
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <init_lcd+0x58>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <init_lcd+0x5e>
	_delay_ms(25);
	
	lcd_command(0x01);
 140:	00 00       	nop
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	b4 df       	rcall	.-152    	; 0xae <lcd_command>
 146:	8f e4       	ldi	r24, 0x4F	; 79
 148:	93 ec       	ldi	r25, 0xC3	; 195
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <init_lcd+0x68>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <init_lcd+0x6e>
 150:	00 00       	nop
 152:	08 95       	ret

00000154 <wait>:
void initTimer( void )
{
	OCR2 = 250;
	TIMSK|= (1 << 7);
	TCCR2 = 0x07;
	DDRC = 0xff;
 154:	18 16       	cp	r1, r24
 156:	19 06       	cpc	r1, r25
 158:	6c f4       	brge	.+26     	; 0x174 <wait+0x20>
 15a:	20 e0       	ldi	r18, 0x00	; 0
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	ef ec       	ldi	r30, 0xCF	; 207
 160:	f7 e0       	ldi	r31, 0x07	; 7
 162:	31 97       	sbiw	r30, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <wait+0xe>
 166:	00 c0       	rjmp	.+0      	; 0x168 <wait+0x14>
 168:	00 00       	nop
 16a:	2f 5f       	subi	r18, 0xFF	; 255
 16c:	3f 4f       	sbci	r19, 0xFF	; 255
 16e:	82 17       	cp	r24, r18
 170:	93 07       	cpc	r25, r19
 172:	a9 f7       	brne	.-22     	; 0x15e <wait+0xa>
 174:	08 95       	ret

00000176 <__vector_9>:
 176:	1f 92       	push	r1
 178:	0f 92       	push	r0
 17a:	0f b6       	in	r0, 0x3f	; 63
 17c:	0f 92       	push	r0
 17e:	11 24       	eor	r1, r1
 180:	8f 93       	push	r24
 182:	9f 93       	push	r25
 184:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <msCount>
 188:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <msCount+0x1>
 18c:	01 96       	adiw	r24, 0x01	; 1
 18e:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <msCount+0x1>
 192:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <msCount>
 196:	89 31       	cpi	r24, 0x19	; 25
 198:	91 05       	cpc	r25, r1
 19a:	79 f4       	brne	.+30     	; 0x1ba <__vector_9+0x44>
 19c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1a0:	81 11       	cpse	r24, r1
 1a2:	1a c0       	rjmp	.+52     	; 0x1d8 <__vector_9+0x62>
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 1aa:	82 b3       	in	r24, 0x12	; 18
 1ac:	80 58       	subi	r24, 0x80	; 128
 1ae:	82 bb       	out	0x12, r24	; 18
 1b0:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <msCount+0x1>
 1b4:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <msCount>
 1b8:	0f c0       	rjmp	.+30     	; 0x1d8 <__vector_9+0x62>
 1ba:	0f 97       	sbiw	r24, 0x0f	; 15
 1bc:	69 f4       	brne	.+26     	; 0x1d8 <__vector_9+0x62>
 1be:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1c2:	81 30       	cpi	r24, 0x01	; 1
 1c4:	49 f4       	brne	.+18     	; 0x1d8 <__vector_9+0x62>
 1c6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 1ca:	82 b3       	in	r24, 0x12	; 18
 1cc:	80 58       	subi	r24, 0x80	; 128
 1ce:	82 bb       	out	0x12, r24	; 18
 1d0:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <msCount+0x1>
 1d4:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <msCount>
 1d8:	9f 91       	pop	r25
 1da:	8f 91       	pop	r24
 1dc:	0f 90       	pop	r0
 1de:	0f be       	out	0x3f, r0	; 63
 1e0:	0f 90       	pop	r0
 1e2:	1f 90       	pop	r1
 1e4:	18 95       	reti

000001e6 <timer2Init>:
}


void timer2Init( void )
{
	OCR2 = 125;				// Compare value of counter 2
 1e6:	8d e7       	ldi	r24, 0x7D	; 125
 1e8:	83 bd       	out	0x23, r24	; 35
	TIMSK |= BIT(7);		// T2 compare match interrupt enable
 1ea:	87 b7       	in	r24, 0x37	; 55
 1ec:	80 68       	ori	r24, 0x80	; 128
 1ee:	87 bf       	out	0x37, r24	; 55
	TCCR2 = 0b00001011;		// Initialize T2: timer, prescaler=32,
 1f0:	8b e0       	ldi	r24, 0x0B	; 11
 1f2:	85 bd       	out	0x25, r24	; 37
 1f4:	08 95       	ret

000001f6 <main>:



int main(void)
{
    init_lcd();
 1f6:	75 df       	rcall	.-278    	; 0xe2 <init_lcd>
	timer2Init();
 1f8:	f6 df       	rcall	.-20     	; 0x1e6 <timer2Init>
 1fa:	78 94       	sei
	sei();
 1fc:	8f ef       	ldi	r24, 0xFF	; 255
	DDRD = 0xff;
 1fe:	81 bb       	out	0x11, r24	; 17
 200:	84 e6       	ldi	r24, 0x64	; 100
    while (1) 
    {
	
		wait(100);
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	a7 df       	rcall	.-178    	; 0x154 <wait>
 206:	fc cf       	rjmp	.-8      	; 0x200 <main+0xa>

00000208 <_exit>:
 208:	f8 94       	cli

0000020a <__stop_program>:
 20a:	ff cf       	rjmp	.-2      	; 0x20a <__stop_program>
