
Week_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000338  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  000003ac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f23  00000000  00000000  00000498  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a4f  00000000  00000000  000013bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000623  00000000  00000000  00001e0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000011c  00000000  00000000  00002430  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ce  00000000  00000000  0000254c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000609  00000000  00000000  00002a1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00003023  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	e5 c0       	rjmp	.+458    	; 0x1f0 <__vector_9>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a3 30       	cpi	r26, 0x03	; 3
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	e5 d0       	rcall	.+458    	; 0x274 <main>
  aa:	44 c1       	rjmp	.+648    	; 0x334 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <lcd_command>:
#include "LCD.h"

void lcd_command(unsigned char command)  //Function to send command instruction to LCD
{
	PORTC = command & 0xF0; // hoge nibble
  ae:	98 2f       	mov	r25, r24
  b0:	90 7f       	andi	r25, 0xF0	; 240
  b2:	95 bb       	out	0x15, r25	; 21
	PORTC = PORTC | 0x08; // data (RS=0),
  b4:	ab 9a       	sbi	0x15, 3	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b6:	ef e4       	ldi	r30, 0x4F	; 79
  b8:	f3 ec       	ldi	r31, 0xC3	; 195
  ba:	31 97       	sbiw	r30, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <lcd_command+0xc>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <lcd_command+0x12>
  c0:	00 00       	nop
	// start (EN=1)
	_delay_ms(25); // wait 1 ms
	PORTC = 0x04; // stop (EN = 0)
  c2:	94 e0       	ldi	r25, 0x04	; 4
  c4:	95 bb       	out	0x15, r25	; 21
	PORTC = (command & 0x0F) << 4; // lage nibble
  c6:	f0 e1       	ldi	r31, 0x10	; 16
  c8:	8f 9f       	mul	r24, r31
  ca:	c0 01       	movw	r24, r0
  cc:	11 24       	eor	r1, r1
  ce:	85 bb       	out	0x15, r24	; 21
	PORTC = PORTC | 0x08; // data (RS=0),
  d0:	ab 9a       	sbi	0x15, 3	; 21
  d2:	8f e4       	ldi	r24, 0x4F	; 79
  d4:	93 ec       	ldi	r25, 0xC3	; 195
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <lcd_command+0x28>
  da:	00 c0       	rjmp	.+0      	; 0xdc <lcd_command+0x2e>
  dc:	00 00       	nop
	// start (EN=1)
	_delay_ms(25); // wait 1 ms
	PORTC = 0x00; // stop
  de:	15 ba       	out	0x15, r1	; 21
  e0:	08 95       	ret

000000e2 <init_lcd>:
}

void init_lcd(void)
{
	// return home
	DDRC = 0xff;
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	84 bb       	out	0x14, r24	; 20
  e6:	8f e4       	ldi	r24, 0x4F	; 79
  e8:	93 ec       	ldi	r25, 0xC3	; 195
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <init_lcd+0x8>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <init_lcd+0xe>
  f0:	00 00       	nop
	
	_delay_ms(25);
	
	lcd_command( 0x02 );
  f2:	82 e0       	ldi	r24, 0x02	; 2
  f4:	dc df       	rcall	.-72     	; 0xae <lcd_command>
  f6:	8f e4       	ldi	r24, 0x4F	; 79
  f8:	93 ec       	ldi	r25, 0xC3	; 195
  fa:	01 97       	sbiw	r24, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <init_lcd+0x18>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <init_lcd+0x1e>
 100:	00 00       	nop
	_delay_ms(25);
	
	// mode: 4 bits interface data, 2 lines, 5x8 dots
	lcd_command( 0x28 );
 102:	88 e2       	ldi	r24, 0x28	; 40
 104:	d4 df       	rcall	.-88     	; 0xae <lcd_command>
 106:	8f e4       	ldi	r24, 0x4F	; 79
 108:	93 ec       	ldi	r25, 0xC3	; 195
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <init_lcd+0x28>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <init_lcd+0x2e>
	_delay_ms(25);
	
	// display: on, cursor off, blinking off
	lcd_command( 0x0C );
 110:	00 00       	nop
 112:	8c e0       	ldi	r24, 0x0C	; 12
 114:	cc df       	rcall	.-104    	; 0xae <lcd_command>
 116:	8f e4       	ldi	r24, 0x4F	; 79
 118:	93 ec       	ldi	r25, 0xC3	; 195
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <init_lcd+0x38>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <init_lcd+0x3e>
	_delay_ms(25);
	
	// entry mode: cursor to right, no shift
	lcd_command( 0x06 );
 120:	00 00       	nop
 122:	86 e0       	ldi	r24, 0x06	; 6
 124:	c4 df       	rcall	.-120    	; 0xae <lcd_command>
 126:	8f e4       	ldi	r24, 0x4F	; 79
 128:	93 ec       	ldi	r25, 0xC3	; 195
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <init_lcd+0x48>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <init_lcd+0x4e>
	_delay_ms(25);

	// RAM adress: 0, first position, line 1
	lcd_command( 0x80 );
 130:	00 00       	nop
 132:	80 e8       	ldi	r24, 0x80	; 128
 134:	bc df       	rcall	.-136    	; 0xae <lcd_command>
 136:	8f e4       	ldi	r24, 0x4F	; 79
 138:	93 ec       	ldi	r25, 0xC3	; 195
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <init_lcd+0x58>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <init_lcd+0x5e>
	_delay_ms(25);
	
	lcd_command(0x01);
 140:	00 00       	nop
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	b4 df       	rcall	.-152    	; 0xae <lcd_command>
 146:	8f e4       	ldi	r24, 0x4F	; 79
 148:	93 ec       	ldi	r25, 0xC3	; 195
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <init_lcd+0x68>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <init_lcd+0x6e>
 150:	00 00       	nop
 152:	08 95       	ret

00000154 <lcd_writeChar>:



void lcd_writeChar( unsigned char dat )
{
	PORTC = dat & 0xF0; // hoge nibble
 154:	98 2f       	mov	r25, r24
 156:	90 7f       	andi	r25, 0xF0	; 240
 158:	95 bb       	out	0x15, r25	; 21
	PORTC = PORTC | 0x0C; // data (RS=1),
 15a:	95 b3       	in	r25, 0x15	; 21
 15c:	9c 60       	ori	r25, 0x0C	; 12
 15e:	95 bb       	out	0x15, r25	; 21
 160:	ef e4       	ldi	r30, 0x4F	; 79
 162:	f3 ec       	ldi	r31, 0xC3	; 195
 164:	31 97       	sbiw	r30, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <lcd_writeChar+0x10>
 168:	00 c0       	rjmp	.+0      	; 0x16a <lcd_writeChar+0x16>
 16a:	00 00       	nop
	// start (EN=1)
	_delay_ms(25); // wait 1 ms
	PORTC = 0x04; // stop (EN = 0)
 16c:	94 e0       	ldi	r25, 0x04	; 4
 16e:	95 bb       	out	0x15, r25	; 21
	PORTC = (dat & 0x0F) << 4; // lage nibble
 170:	f0 e1       	ldi	r31, 0x10	; 16
 172:	8f 9f       	mul	r24, r31
 174:	c0 01       	movw	r24, r0
 176:	11 24       	eor	r1, r1
 178:	85 bb       	out	0x15, r24	; 21
	PORTC = PORTC | 0x0C; // data (RS=1),
 17a:	85 b3       	in	r24, 0x15	; 21
 17c:	8c 60       	ori	r24, 0x0C	; 12
 17e:	85 bb       	out	0x15, r24	; 21
 180:	8f e4       	ldi	r24, 0x4F	; 79
 182:	93 ec       	ldi	r25, 0xC3	; 195
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <lcd_writeChar+0x30>
 188:	00 c0       	rjmp	.+0      	; 0x18a <lcd_writeChar+0x36>
 18a:	00 00       	nop
	// start (EN=1)
	_delay_ms(25); // wait 1 ms
	PORTC = 0x00; // stop
 18c:	15 ba       	out	0x15, r1	; 21
 18e:	08 95       	ret

00000190 <lcd_writeLine1>:
	// (EN=0 RS=0)
}

void lcd_writeLine1 ( char text1[] )
{
 190:	ff 92       	push	r15
 192:	0f 93       	push	r16
 194:	1f 93       	push	r17
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	ec 01       	movw	r28, r24
	// eerst de eerste 8 karakters = regel 1
	// eerste pos regel 1
	lcd_command(0x80);
 19c:	80 e8       	ldi	r24, 0x80	; 128
 19e:	87 df       	rcall	.-242    	; 0xae <lcd_command>
	
	uint8_t strsize = strlen(text1);
 1a0:	fe 01       	movw	r30, r28
 1a2:	01 90       	ld	r0, Z+
 1a4:	00 20       	and	r0, r0
 1a6:	e9 f7       	brne	.-6      	; 0x1a2 <lcd_writeLine1+0x12>
 1a8:	31 97       	sbiw	r30, 0x01	; 1
 1aa:	fe 2e       	mov	r15, r30
 1ac:	fc 1a       	sub	r15, r28
	for (uint8_t i=0; i<strsize; i++) {
 1ae:	49 f0       	breq	.+18     	; 0x1c2 <lcd_writeLine1+0x32>
 1b0:	8e 01       	movw	r16, r28
 1b2:	c0 e0       	ldi	r28, 0x00	; 0
		lcd_writeChar( text1[i] );
 1b4:	f8 01       	movw	r30, r16
 1b6:	81 91       	ld	r24, Z+
 1b8:	8f 01       	movw	r16, r30
 1ba:	cc df       	rcall	.-104    	; 0x154 <lcd_writeChar>
	// eerst de eerste 8 karakters = regel 1
	// eerste pos regel 1
	lcd_command(0x80);
	
	uint8_t strsize = strlen(text1);
	for (uint8_t i=0; i<strsize; i++) {
 1bc:	cf 5f       	subi	r28, 0xFF	; 255
 1be:	fc 12       	cpse	r15, r28
 1c0:	f9 cf       	rjmp	.-14     	; 0x1b4 <lcd_writeLine1+0x24>
		lcd_writeChar( text1[i] );
	}
	
}
 1c2:	df 91       	pop	r29
 1c4:	cf 91       	pop	r28
 1c6:	1f 91       	pop	r17
 1c8:	0f 91       	pop	r16
 1ca:	ff 90       	pop	r15
 1cc:	08 95       	ret

000001ce <wait>:



void wait( int ms )
{
	for (int i=0; i<ms; i++)
 1ce:	18 16       	cp	r1, r24
 1d0:	19 06       	cpc	r1, r25
 1d2:	6c f4       	brge	.+26     	; 0x1ee <wait+0x20>
 1d4:	20 e0       	ldi	r18, 0x00	; 0
 1d6:	30 e0       	ldi	r19, 0x00	; 0
 1d8:	ef ec       	ldi	r30, 0xCF	; 207
 1da:	f7 e0       	ldi	r31, 0x07	; 7
 1dc:	31 97       	sbiw	r30, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <wait+0xe>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <wait+0x14>
 1e2:	00 00       	nop
 1e4:	2f 5f       	subi	r18, 0xFF	; 255
 1e6:	3f 4f       	sbci	r19, 0xFF	; 255
 1e8:	82 17       	cp	r24, r18
 1ea:	93 07       	cpc	r25, r19
 1ec:	a9 f7       	brne	.-22     	; 0x1d8 <wait+0xa>
 1ee:	08 95       	ret

000001f0 <__vector_9>:
char isOn = 0;



ISR( TIMER2_COMP_vect )
{
 1f0:	1f 92       	push	r1
 1f2:	0f 92       	push	r0
 1f4:	0f b6       	in	r0, 0x3f	; 63
 1f6:	0f 92       	push	r0
 1f8:	11 24       	eor	r1, r1
 1fa:	8f 93       	push	r24
 1fc:	9f 93       	push	r25
	msCount++; // Increment ms counter
 1fe:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <msCount>
 202:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <msCount+0x1>
 206:	01 96       	adiw	r24, 0x01	; 1
 208:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <msCount+0x1>
 20c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <msCount>
	if ( msCount == 25 && isOn == 0)
 210:	89 31       	cpi	r24, 0x19	; 25
 212:	91 05       	cpc	r25, r1
 214:	79 f4       	brne	.+30     	; 0x234 <__vector_9+0x44>
 216:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 21a:	81 11       	cpse	r24, r1
 21c:	1a c0       	rjmp	.+52     	; 0x252 <__vector_9+0x62>
	{
		isOn = 1;
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		PORTD ^= (1 << 7); // Toggle bit 7 van PORTD
 224:	82 b3       	in	r24, 0x12	; 18
 226:	80 58       	subi	r24, 0x80	; 128
 228:	82 bb       	out	0x12, r24	; 18
		msCount = 0; // Reset ms_count value
 22a:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <msCount+0x1>
 22e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <msCount>
 232:	0f c0       	rjmp	.+30     	; 0x252 <__vector_9+0x62>
	}
	else if(msCount == 15 && isOn == 1)
 234:	0f 97       	sbiw	r24, 0x0f	; 15
 236:	69 f4       	brne	.+26     	; 0x252 <__vector_9+0x62>
 238:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 23c:	81 30       	cpi	r24, 0x01	; 1
 23e:	49 f4       	brne	.+18     	; 0x252 <__vector_9+0x62>
	{
		isOn = 0;
 240:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		PORTD ^= (1 << 7); // Toggle bit 7 van PORTD
 244:	82 b3       	in	r24, 0x12	; 18
 246:	80 58       	subi	r24, 0x80	; 128
 248:	82 bb       	out	0x12, r24	; 18
		msCount = 0; // Reset ms_count value
 24a:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <msCount+0x1>
 24e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <msCount>
	}
}
 252:	9f 91       	pop	r25
 254:	8f 91       	pop	r24
 256:	0f 90       	pop	r0
 258:	0f be       	out	0x3f, r0	; 63
 25a:	0f 90       	pop	r0
 25c:	1f 90       	pop	r1
 25e:	18 95       	reti

00000260 <initTimer>:

void initTimer( void )
{
	OCR2 = 250;
 260:	8a ef       	ldi	r24, 0xFA	; 250
 262:	83 bd       	out	0x23, r24	; 35
	TIMSK|= (1 << 7);
 264:	87 b7       	in	r24, 0x37	; 55
 266:	80 68       	ori	r24, 0x80	; 128
 268:	87 bf       	out	0x37, r24	; 55
	TCCR2 = 0x07;
 26a:	87 e0       	ldi	r24, 0x07	; 7
 26c:	85 bd       	out	0x25, r24	; 37
	DDRC = 0xff;
 26e:	8f ef       	ldi	r24, 0xFF	; 255
 270:	84 bb       	out	0x14, r24	; 20
 272:	08 95       	ret

00000274 <main>:
	
}

int main(void)
{
 274:	cf 93       	push	r28
 276:	df 93       	push	r29
 278:	cd b7       	in	r28, 0x3d	; 61
 27a:	de b7       	in	r29, 0x3e	; 62
 27c:	29 97       	sbiw	r28, 0x09	; 9
 27e:	0f b6       	in	r0, 0x3f	; 63
 280:	f8 94       	cli
 282:	de bf       	out	0x3e, r29	; 62
 284:	0f be       	out	0x3f, r0	; 63
 286:	cd bf       	out	0x3d, r28	; 61
    init_lcd();
 288:	2c df       	rcall	.-424    	; 0xe2 <init_lcd>
	initTimer();
 28a:	ea df       	rcall	.-44     	; 0x260 <initTimer>
 28c:	78 94       	sei
	sei();
 28e:	1f ef       	ldi	r17, 0xFF	; 255
	
    while (1) 
    {
		wait(10);
		
		DDRB = 0xFF; // PORTB is output
 290:	8a e0       	ldi	r24, 0x0A	; 10
	initTimer();
	sei();
	
    while (1) 
    {
		wait(10);
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	9c df       	rcall	.-200    	; 0x1ce <wait>
 296:	17 bb       	out	0x17, r17	; 23
		
		DDRB = 0xFF; // PORTB is output
 298:	84 b5       	in	r24, 0x24	; 36
		PORTB = TCNT2;
 29a:	88 bb       	out	0x18, r24	; 24
 29c:	84 b5       	in	r24, 0x24	; 36
		char string[9];
		itoa(TCNT2, string, 9);
 29e:	49 e0       	ldi	r20, 0x09	; 9
 2a0:	50 e0       	ldi	r21, 0x00	; 0
 2a2:	be 01       	movw	r22, r28
 2a4:	6f 5f       	subi	r22, 0xFF	; 255
 2a6:	7f 4f       	sbci	r23, 0xFF	; 255
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	07 d0       	rcall	.+14     	; 0x2ba <itoa>
		lcd_writeLine1(string);
 2ac:	ce 01       	movw	r24, r28
 2ae:	01 96       	adiw	r24, 0x01	; 1
 2b0:	6f df       	rcall	.-290    	; 0x190 <lcd_writeLine1>
		wait(100);
 2b2:	84 e6       	ldi	r24, 0x64	; 100
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	8b df       	rcall	.-234    	; 0x1ce <wait>
 2b8:	eb cf       	rjmp	.-42     	; 0x290 <main+0x1c>

000002ba <itoa>:
 2ba:	45 32       	cpi	r20, 0x25	; 37
 2bc:	51 05       	cpc	r21, r1
 2be:	18 f4       	brcc	.+6      	; 0x2c6 <itoa+0xc>
 2c0:	42 30       	cpi	r20, 0x02	; 2
 2c2:	08 f0       	brcs	.+2      	; 0x2c6 <itoa+0xc>
 2c4:	04 c0       	rjmp	.+8      	; 0x2ce <__itoa_ncheck>
 2c6:	fb 01       	movw	r30, r22
 2c8:	10 82       	st	Z, r1
 2ca:	cb 01       	movw	r24, r22
 2cc:	08 95       	ret

000002ce <__itoa_ncheck>:
 2ce:	bb 27       	eor	r27, r27
 2d0:	4a 30       	cpi	r20, 0x0A	; 10
 2d2:	31 f4       	brne	.+12     	; 0x2e0 <__itoa_ncheck+0x12>
 2d4:	99 23       	and	r25, r25
 2d6:	22 f4       	brpl	.+8      	; 0x2e0 <__itoa_ncheck+0x12>
 2d8:	bd e2       	ldi	r27, 0x2D	; 45
 2da:	90 95       	com	r25
 2dc:	81 95       	neg	r24
 2de:	9f 4f       	sbci	r25, 0xFF	; 255
 2e0:	01 c0       	rjmp	.+2      	; 0x2e4 <__utoa_common>

000002e2 <__utoa_ncheck>:
 2e2:	bb 27       	eor	r27, r27

000002e4 <__utoa_common>:
 2e4:	fb 01       	movw	r30, r22
 2e6:	55 27       	eor	r21, r21
 2e8:	aa 27       	eor	r26, r26
 2ea:	88 0f       	add	r24, r24
 2ec:	99 1f       	adc	r25, r25
 2ee:	aa 1f       	adc	r26, r26
 2f0:	a4 17       	cp	r26, r20
 2f2:	10 f0       	brcs	.+4      	; 0x2f8 <__utoa_common+0x14>
 2f4:	a4 1b       	sub	r26, r20
 2f6:	83 95       	inc	r24
 2f8:	50 51       	subi	r21, 0x10	; 16
 2fa:	b9 f7       	brne	.-18     	; 0x2ea <__utoa_common+0x6>
 2fc:	a0 5d       	subi	r26, 0xD0	; 208
 2fe:	aa 33       	cpi	r26, 0x3A	; 58
 300:	08 f0       	brcs	.+2      	; 0x304 <__utoa_common+0x20>
 302:	a9 5d       	subi	r26, 0xD9	; 217
 304:	a1 93       	st	Z+, r26
 306:	00 97       	sbiw	r24, 0x00	; 0
 308:	79 f7       	brne	.-34     	; 0x2e8 <__utoa_common+0x4>
 30a:	b1 11       	cpse	r27, r1
 30c:	b1 93       	st	Z+, r27
 30e:	11 92       	st	Z+, r1
 310:	cb 01       	movw	r24, r22
 312:	00 c0       	rjmp	.+0      	; 0x314 <strrev>

00000314 <strrev>:
 314:	dc 01       	movw	r26, r24
 316:	fc 01       	movw	r30, r24
 318:	67 2f       	mov	r22, r23
 31a:	71 91       	ld	r23, Z+
 31c:	77 23       	and	r23, r23
 31e:	e1 f7       	brne	.-8      	; 0x318 <strrev+0x4>
 320:	32 97       	sbiw	r30, 0x02	; 2
 322:	04 c0       	rjmp	.+8      	; 0x32c <strrev+0x18>
 324:	7c 91       	ld	r23, X
 326:	6d 93       	st	X+, r22
 328:	70 83       	st	Z, r23
 32a:	62 91       	ld	r22, -Z
 32c:	ae 17       	cp	r26, r30
 32e:	bf 07       	cpc	r27, r31
 330:	c8 f3       	brcs	.-14     	; 0x324 <strrev+0x10>
 332:	08 95       	ret

00000334 <_exit>:
 334:	f8 94       	cli

00000336 <__stop_program>:
 336:	ff cf       	rjmp	.-2      	; 0x336 <__stop_program>
